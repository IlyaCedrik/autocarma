import Category from '../../database/models/Category.js';
import Subscription from '../../database/models/Subscription.js';
import User from '../../database/models/User.js';
import { categoriesKeyboard } from '../keyboards/categories.js';
import { subscriptionKeyboard } from '../keyboards/subscription.js';

const showCategories = async (ctx) => {
  try {
    const categories = await Category.getAll();
    const user = await User.findByTelegramId(ctx.from.id);
    
    if (!user) {
      return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
    }

    const userSubscriptions = await Subscription.getUserSubscriptions(user.id);
    const subscribedCategoryIds = userSubscriptions.map(sub => sub.category_id);

    const message = `
üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:

${categories.map(cat => {
  const isSubscribed = subscribedCategoryIds.includes(cat.id);
  const status = isSubscribed ? '‚úÖ' : '‚≠ï';
  const price = (cat.price / 100).toFixed(0);
  return `${status} ${cat.name} - ${price}‚ÇΩ/–º–µ—Å`;
}).join('\n')}

üí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ—Ç–ø–∏—Å–∫–∏:
    `;

    await ctx.reply(message, categoriesKeyboard(categories, subscribedCategoryIds));
  } catch (error) {
    console.error('Show categories error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
  }
};

const subscribe = async (ctx) => {
  try {
    const categoryId = ctx.match[1];
    const user = await User.findByTelegramId(ctx.from.id);
    const category = await Category.findById(categoryId);

    if (!user || !category) {
      return ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    const isSubscribed = await Subscription.isUserSubscribed(user.id, categoryId);

    if (isSubscribed) {
      return ctx.reply('‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    }

    const price = (category.price / 100).toFixed(0);
    const message = `
üìÇ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞: ${category.name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${price}‚ÇΩ –≤ –º–µ—Å—è—Ü

${category.description || ''}

–ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:
    `;

    await ctx.reply(message, subscriptionKeyboard(categoryId));
  } catch (error) {
    console.error('Subscribe error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
  }
};

const unsubscribe = async (ctx) => {
  try {
    const categoryId = ctx.match[1];
    const user = await User.findByTelegramId(ctx.from.id);
    const category = await Category.findById(categoryId);

    if (!user || !category) {
      return ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    await Subscription.deactivate(user.id, categoryId);
    
    await ctx.reply(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ "${category.name}" –æ—Ç–º–µ–Ω–µ–Ω–∞`);
  } catch (error) {
    console.error('Unsubscribe error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏');
  }
};

const mySubscriptions = async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    
    if (!user) {
      return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const subscriptions = await Subscription.getUserSubscriptions(user.id);

    if (subscriptions.length === 0) {
      return ctx.reply('üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫');
    }

    const message = `
üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:

${subscriptions.map(sub => {
  const expiresAt = new Date(sub.expires_at);
  const daysLeft = Math.ceil((expiresAt - new Date()) / (1000 * 60 * 60 * 24));
  return `‚Ä¢ ${sub.categories.name} (–æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π)`;
}).join('\n')}
    `;

    await ctx.reply(message);
  } catch (error) {
    console.error('My subscriptions error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫');
  }
};

export default {
  showCategories,
  subscribe,
  unsubscribe,
  mySubscriptions
}; 